How to Set Up SSH Keys for Secure Server Access
SSH keys are a robust and secure alternative to password-based authentication, adding an extra layer of security to server access. They eliminate the need to type your password for each login, reduce the risk of brute-force attacks, and are easy to set up. In this guide, I’ll walk you through the process of generating SSH keys, adding them to a server, and even enhancing security further by disabling password-based login entirely.

What Are SSH Keys?
SSH keys work like a key-and-lock system. The keys come in pairs:

Public Key: Stays on the server and acts as the lock.

Private Key: Stays on your local machine and functions as the key to unlock the lock.

When you log into the server, your private key verifies that it matches the public key stored on the server. If they match, the server grants access. This process ensures that your connection is authenticated without requiring a password.

Step 1: Generate SSH Keys
To start, you need to generate a key pair on your local machine. Open a terminal and run:

bash
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
The -t rsa specifies the type of key (RSA), and -b 4096 sets the key length to 4096 bits for added security.

The -C flag adds a comment, usually your email, to help identify the key.

When prompted, press Enter to accept the default file location (e.g., ~/.ssh/id_rsa), unless you need the keys saved elsewhere. Optionally, you can add a passphrase for extra protection in case your private key gets compromised.

Step 2: Copy the Public Key to Your Server
Next, you need to transfer your public key to the server so it can recognize your private key. Use the ssh-copy-id command:

bash
ssh-copy-id user@server_ip
Replace user with your username and server_ip with the server's IP address. The command adds your public key to the server’s authorized keys file (~/.ssh/authorized_keys), granting access to your private key.

If ssh-copy-id is not available, you can manually copy the key:

Display your public key:

bash
cat ~/.ssh/id_rsa.pub
Copy the output and paste it into the server's ~/.ssh/authorized_keys file.

Step 3: Test the SSH Key Login
Once your public key is added to the server, test the setup:

bash
ssh user@server_ip
If configured correctly, you’ll be logged in without entering a password. If prompted for a passphrase, that’s for your private key and is normal.

Step 4: Disable Password Authentication (Optional)
To enhance security further, you can disable password-based login entirely. This ensures only SSH keys can be used for authentication.

Open the SSH configuration file on your server:

bash
sudo nano /etc/ssh/sshd_config
Find and set the following options:

PasswordAuthentication no
ChallengeResponseAuthentication no
Restart the SSH service to apply the changes:

bash
sudo systemctl restart ssh
With password authentication disabled, attackers cannot log in with guessed or stolen passwords, even if they know your username.

Additional Tips for Managing SSH Keys
Backup Your Keys: Save your private key in a secure location like a password manager or encrypted storage. Losing the private key means losing access to your server.

Use Multiple Keys: For environments with multiple servers or users, create separate key pairs for each for better management.

Rotate Keys Periodically: Regularly generate new key pairs and update them on your server for enhanced security.

Conclusion
SSH keys offer a simple yet powerful way to secure server access while improving convenience. By following these steps, you’ve eliminated the need for passwords, significantly reducing the risk of brute-force attacks. For maximum security, consider disabling password login altogether and regularly reviewing your key management practices.
